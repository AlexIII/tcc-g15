name: Build and Release TCC-G15

on:
  push:
    tags:
      - 'v*.*.*' # Trigger on tags like v1.0.0
  workflow_dispatch: # Allow manual triggering

jobs:
  build-release:
    runs-on: windows-latest
    permissions:
      contents: write # Needed for creating releases and uploading assets

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Specify Python version

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Install Inno Setup
        uses: MinYoungLee/setup-innosetup@v1.2.1 # Community action for Inno Setup
        # This action should add iscc to the PATH
        # Alternative: Manual install using PowerShell if this action fails
        # - name: Download Inno Setup
        #   shell: powershell
        #   run: |
        #     Invoke-WebRequest -Uri "https://jrsoftware.org/download.php/is.exe" -OutFile "is-setup.exe"
        # - name: Install Inno Setup
        #   run: |
        #     .\is-setup.exe /SILENT /SUPPRESSMSGBOXES /NORESTART /SP- /DIR="C:\Program Files (x86)\Inno Setup 6"
        # - name: Add Inno Setup to PATH
        #   run: echo "C:\Program Files (x86)\Inno Setup 6" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Build with PyInstaller (for Inno Setup - one-folder)
        run: |
          pyinstaller --icon=icons/gaugeIcon.ico --add-data "icons/gaugeIcon.png;icons" --add-data "tcc_g15_task.xml;." --hidden-import PySide6 --collect-all winrt -w -y --distpath dist --workpath build/for_installer --specpath . src/tcc-g15.py
          # This should create output in dist/tcc-g15/

      - name: Build Installer with Inno Setup
        run: |
          iscc installer-inno-config.iss
          # Assuming installer-inno-config.iss is configured to find files in dist/tcc-g15
          # And outputs to a known location, e.g., an 'Output' directory.
          # The .iss file might have something like:
          # OutputDir=Output
          # OutputBaseFilename=setup-tcc-g15
          # Let's assume the output is Output/setup-tcc-g15.exe

      - name: Build with PyInstaller (Portable - one-file)
        run: |
          pyinstaller --icon=icons/gaugeIcon.ico --add-data "icons/gaugeIcon.png;icons" --add-data "tcc_g15_task.xml;." --hidden-import PySide6 --collect-all winrt -w -F -y --distpath dist/portable --workpath build/portable --specpath . src/tcc-g15.py
          # This should create output in dist/portable/tcc-g15.exe

      - name: Get version from tag
        id: get_version
        run: |
          echo "VERSION=${{ github.ref_name }}" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        shell: powershell

      - name: Rename artifacts
        shell: powershell
        id: renamer
        run: |
          $version = "${{ steps.get_version.outputs.VERSION }}" # e.g., v1.2.3
          $portable_name = "tcc-g15-portable-$version.exe"
          $installer_name = "setup-tcc-g15-$version.exe"

          if (Test-Path "dist/portable/tcc-g15.exe") {
            Rename-Item -Path "dist/portable/tcc-g15.exe" -NewName $portable_name
            echo "PORTABLE_PATH=dist/portable/$portable_name" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            echo "PORTABLE_FILENAME=$portable_name" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

          } else {
            echo "Portable executable not found!"
            exit 1
          }

          # Assuming Inno Setup output is in 'Output' directory relative to workspace root
          # And default name is like 'setup.exe' or as defined in ISS.
          # For this example, let's assume the default output from ISS is 'Output/mysetup.exe'
          # This needs to be accurate based on installer-inno-config.iss
          $inno_output_dir = "Output" # This should match OutputDir in ISS
          $inno_original_exe = Get-ChildItem -Path $inno_output_dir -Filter "*.exe" | Select-Object -First 1
          if ($inno_original_exe) {
            Rename-Item -Path $inno_original_exe.FullName -NewName $installer_name
            echo "INSTALLER_PATH=$inno_output_dir/$installer_name" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            echo "INSTALLER_FILENAME=$installer_name" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          } else {
            echo "Installer executable not found in $inno_output_dir!"
            exit 1
          }

      - name: Upload Portable Executable Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tcc-g15-portable-${{ steps.get_version.outputs.VERSION }}
          path: ${{ steps.renamer.outputs.PORTABLE_PATH }}

      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v4
        with:
          name: setup-tcc-g15-installer-${{ steps.get_version.outputs.VERSION }}
          path: ${{ steps.renamer.outputs.INSTALLER_PATH }}

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2 # Updated to v2
        with:
          # tag_name: ${{ github.ref_name }} # Uses the tag that triggered the workflow
          # name: "Release ${{ github.ref_name }}"
          files: |
            ${{ steps.renamer.outputs.PORTABLE_PATH }}
            ${{ steps.renamer.outputs.INSTALLER_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
